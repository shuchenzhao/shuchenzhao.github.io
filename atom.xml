<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhaoshuchen</title>
  
  
  <link href="https://shuchenzhao.github.io/atom.xml" rel="self"/>
  
  <link href="https://shuchenzhao.github.io/"/>
  <updated>2022-05-10T02:10:20.620Z</updated>
  <id>https://shuchenzhao.github.io/</id>
  
  <author>
    <name>Zhaoshuchen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS面向对象写法</title>
    <link href="https://shuchenzhao.github.io/2022/05/10/JS%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%86%99%E6%B3%95/"/>
    <id>https://shuchenzhao.github.io/2022/05/10/JS%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%86%99%E6%B3%95/</id>
    <published>2022-05-10T02:09:50.000Z</published>
    <updated>2022-05-10T02:10:20.620Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建对象的方法"><a href="#创建对象的方法" class="headerlink" title="创建对象的方法"></a>创建对象的方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、对象字面量：let obj = &#123;&#125;;</span></span><br><span class="line"><span class="keyword">let</span> person1 = &#123;</span><br><span class="line">    <span class="attr">firstname</span>: <span class="string">&quot;Mark&quot;</span>,</span><br><span class="line">    <span class="attr">lastname</span>: <span class="string">&quot;Yun&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="attr">eyecolor</span>: <span class="string">&quot;black&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、构造函数</span></span><br><span class="line"><span class="comment">// 用function来模拟无参的构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(); <span class="comment">//定义一个function，如果使用new&quot;实例化&quot;,该function可以看作是一个Class</span></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&quot;Mark&quot;</span>;</span><br><span class="line">person.<span class="property">age</span> = <span class="string">&quot;25&quot;</span>;</span><br><span class="line">person.<span class="property">work</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span> + <span class="string">&quot; hello...&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">person.<span class="title function_">work</span>();</span><br><span class="line"><span class="comment">// 用function来模拟参构造函数来实现（用this关键字定义构造的上下文属性）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Pet</span>(<span class="params">name, age, hobby</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">//this作用域：当前对象</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">hobby</span> = hobby;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">            <span class="string">&quot;我叫&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;,我喜欢&quot;</span> + <span class="variable language_">this</span>.<span class="property">hobby</span> + <span class="string">&quot;,是个程序员&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> maidou = <span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;麦兜&quot;</span>, <span class="number">25</span>, <span class="string">&quot;coding&quot;</span>); <span class="comment">//实例化、创建对象</span></span><br><span class="line">maidou.<span class="title function_">eat</span>(); <span class="comment">//调用eat方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、用工厂方式来创建（内置对象）：let obj = new Object();</span></span><br><span class="line"><span class="keyword">let</span> wcDog = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">wcDog.<span class="property">name</span> = <span class="string">&quot;旺财&quot;</span>;</span><br><span class="line">wcDog.<span class="property">age</span> = <span class="number">3</span>;</span><br><span class="line">wcDog.<span class="property">work</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是&quot;</span> + wcDog.<span class="property">name</span> + <span class="string">&quot;,汪汪汪......&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">wcDog.<span class="title function_">work</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、用原型方式来创建</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;旺财&quot;</span>;</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;是个吃货&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> wangcai = <span class="keyword">new</span> <span class="title class_">Dog</span>(); <span class="comment">// Dog&#123;&#125;</span></span><br><span class="line"><span class="keyword">let</span> debao = <span class="keyword">new</span> <span class="title class_">Dog</span>(); <span class="comment">// Dog&#123;&#125;</span></span><br><span class="line">wangcai.<span class="title function_">eat</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、用混合方式来创建</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params">name, price</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Car</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sell</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;，我现在卖&quot;</span> + <span class="variable language_">this</span>.<span class="property">price</span> + <span class="string">&quot;万元&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> camry = <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;凯美瑞&quot;</span>, <span class="number">27</span>);</span><br><span class="line">camry.<span class="title function_">sell</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、Object.create(Object.prototype)：使用现有的对象来提供新创建的对象的__proto__</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">isHuman</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">printIntroduction</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>. Am I human? <span class="subst">$&#123;<span class="variable language_">this</span>.isHuman&#125;</span>`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> me = <span class="title class_">Object</span>.<span class="title function_">create</span>(person);</span><br><span class="line">me.<span class="property">name</span> = <span class="string">&quot;Matthew&quot;</span>; <span class="comment">// &quot;name&quot; is a property set on &quot;me&quot;, but not on &quot;person&quot;</span></span><br><span class="line">me.<span class="property">isHuman</span> = <span class="literal">true</span>; <span class="comment">// inherited properties can be overwritten</span></span><br><span class="line">me.<span class="title function_">printIntroduction</span>(); <span class="comment">// expected output: &quot;My name is Matthew. Am I human? true&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="类的实现与实例化"><a href="#类的实现与实例化" class="headerlink" title="类的实现与实例化"></a>类的实现与实例化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、构造函数法（this + prototype）：new</span></span><br><span class="line"><span class="comment">// 缺点：编写复杂，可读性差</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Mobile</span>(<span class="params">name, price</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Mobile</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sell</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;，售价 $&quot;</span> + <span class="variable language_">this</span>.<span class="property">price</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> iPhone7 = <span class="keyword">new</span> <span class="title class_">Mobile</span>(<span class="string">&quot;iPhone7&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">iPhone7.<span class="title function_">sell</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、Object.create</span></span><br><span class="line"><span class="comment">// 缺点：不能实现私有属性和私有方法，实例对象之间也不能共享数据；要求IE9+</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">firstname</span>: <span class="string">&quot;Mark&quot;</span>,</span><br><span class="line">    <span class="attr">lastname</span>: <span class="string">&quot;Yun&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="attr">introduce</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I am &quot;</span> + <span class="title class_">Person</span>.<span class="property">firstname</span> + <span class="string">&quot; &quot;</span> + <span class="title class_">Person</span>.<span class="property">lastname</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> person = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Person</span>);</span><br><span class="line">person.<span class="title function_">introduce</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、极简主义法（消除 this 和 prototype）：createNew()</span></span><br><span class="line"><span class="comment">// 优点：容易理解，结构清晰优雅，符合传统的&quot;面向对象编程&quot;的构造</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Cat</span> = &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">3</span>, <span class="comment">// 共享数据 -- 定义在类对象内，createNew() 外</span></span><br><span class="line">    <span class="attr">createNew</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> cat = &#123;&#125;;</span><br><span class="line">        <span class="comment">// let cat = Animal.createNew(); // 继承 Animal 类</span></span><br><span class="line">        cat.<span class="property">name</span> = <span class="string">&quot;小咪&quot;</span>;</span><br><span class="line">        <span class="keyword">let</span> sound = <span class="string">&quot;喵喵喵&quot;</span>; <span class="comment">// 私有属性--定义在 createNew() 内，输出对象外</span></span><br><span class="line">        cat.<span class="property">makeSound</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(sound); <span class="comment">// 暴露私有属性</span></span><br><span class="line">        &#125;;</span><br><span class="line">        cat.<span class="property">changeAge</span> = <span class="keyword">function</span> (<span class="params">num</span>) &#123;</span><br><span class="line">            <span class="title class_">Cat</span>.<span class="property">age</span> = num; <span class="comment">// 修改共享数据</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> cat; <span class="comment">// 输出对象</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> cat = <span class="title class_">Cat</span>.<span class="title function_">createNew</span>();</span><br><span class="line">cat.<span class="title function_">makeSound</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、ES6 语法糖 class：new</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + <span class="variable language_">this</span>.<span class="property">x</span> + <span class="string">&quot;, &quot;</span> + <span class="variable language_">this</span>.<span class="property">y</span> + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> point = <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="继承的方法"><a href="#继承的方法" class="headerlink" title="继承的方法"></a>继承的方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、构造函数绑定：使用 call 或 apply 方法，将父对象的构造函数绑定在子对象上</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params">name, color</span>) &#123;</span><br><span class="line">    <span class="title class_">Animal</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、实例继承：将子对象的 prototype 指向父对象的一个实例</span></span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Cat</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、拷贝继承：如果把父对象的所有属性和方法，拷贝进子对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">extend</span>(<span class="params">Child, Parent</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> p = <span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="keyword">let</span> c = <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> p) &#123;</span><br><span class="line">        c[i] = p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    c.<span class="property">uber</span> = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、原型继承：将子对象的 prototype 指向父对象的 prototype</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">extend</span>(<span class="params">Child, Parent</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> F = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">    F.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">    <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span>;</span><br><span class="line">    <span class="title class_">Child</span>.<span class="property">uber</span> = <span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、ES6 语法糖 extends</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ColorPoint</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Point</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x, y, color</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(x, y); <span class="comment">// 调用父类的constructor(x, y)</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">color</span> + <span class="string">&quot; &quot;</span> + <span class="variable language_">super</span>.<span class="title function_">toString</span>(); <span class="comment">// 调用父类的toString()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;创建对象的方法&quot;&gt;&lt;a href=&quot;#创建对象的方法&quot; class=&quot;headerlink&quot; title=&quot;创建对象的方法&quot;&gt;&lt;/a&gt;创建对象的方法&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JS中this指向等一系列问题</title>
    <link href="https://shuchenzhao.github.io/2022/05/09/JS%E4%B8%ADthis%E6%8C%87%E5%90%91%E7%AD%89%E4%B8%80%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98/"/>
    <id>https://shuchenzhao.github.io/2022/05/09/JS%E4%B8%ADthis%E6%8C%87%E5%90%91%E7%AD%89%E4%B8%80%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98/</id>
    <published>2022-05-09T06:22:16.000Z</published>
    <updated>2022-05-09T06:23:56.665Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近在学Vue，其中Vue2的组件间数据传输用到大量的this，一会指向vm(Vue实例对象)，一会指向vc(组件实例对象)，令人非常头疼。故在此复习一下JS基础知识。</p><hr><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h5 id="1、var-x2F-let-x2F-const区别"><a href="#1、var-x2F-let-x2F-const区别" class="headerlink" title="1、var&#x2F;let&#x2F;const区别"></a>1、var&#x2F;let&#x2F;const区别</h5><table><thead><tr><th></th><th>重复定义</th><th>修改值</th><th>声明提升</th><th>块级作用域</th><th>循环变量</th></tr></thead><tbody><tr><td>var</td><td>✅</td><td>✅</td><td>✅</td><td>❌（除function）</td><td>✅</td></tr><tr><td>let</td><td>✅</td><td>✅</td><td>❌</td><td>✅</td><td>✅</td></tr><tr><td>Const</td><td>❌</td><td>❌（除数组和对象）</td><td>❌</td><td>✅</td><td>❌</td></tr></tbody></table><h5 id="2、立即执行函数IIFE"><a href="#2、立即执行函数IIFE" class="headerlink" title="2、立即执行函数IIFE"></a>2、立即执行函数IIFE</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>这是一个被称为 自执行匿名函数的设计模式，主要包含两部分。第一部分是包围在<code>()</code>里的一个匿名函数，这个匿名函数拥有独立的词法作用域。这不仅避免了外界访问此 IIFE 中的变量，而且又不会污染全局作用域。</p><p>第二部分再一次使用 <code>()</code> 创建了一个立即执行函数表达式，JavaScript 引擎到此将直接执行函数。</p><p>当函数变成立即执行的函数表达式时，表达式中的变量不能从外部访问。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;Barry&quot;</span>;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 无法从外部访问变量 name</span></span><br><span class="line">name <span class="comment">// 抛出错误：&quot;Uncaught ReferenceError: name is not defined&quot;</span></span><br></pre></td></tr></table></figure><p>将 IIFE 分配给一个变量，不是存储 IIFE 本身，而是存储 IIFE 执行后返回的结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;Barry&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// IIFE 执行后返回的结果：</span></span><br><span class="line">result; <span class="comment">// &quot;Barry&quot;</span></span><br></pre></td></tr></table></figure><h5 id="3、call-x2F-apply-x2F-bind"><a href="#3、call-x2F-apply-x2F-bind" class="headerlink" title="3、call&#x2F;apply&#x2F;bind"></a>3、call&#x2F;apply&#x2F;bind</h5><p><strong><code>call()</code></strong> 方法使用一个指定的 <code>this</code> 值和单独给出的一个或多个参数来调用一个函数。</p><p>该方法的语法和作用与 <code>apply()</code> 方法类似，只有一个区别，就是 <code>call()</code> 方法接受的是一个参数列表，而 <code>apply()</code> 方法接受的是一个包含多个参数的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>.<span class="title function_">call</span>(thisArg, arg1, arg2, ...)</span><br></pre></td></tr></table></figure><ul><li><code>thisArg</code>可选的。在 <em><code>function</code></em> 函数运行时使用的 <code>this</code> 值。请注意，<code>this</code>可能不是该方法看到的实际值：如果这个函数处于非严格模式下，则指定为 <code>null</code> 或 <code>undefined</code> 时会自动替换为指向全局对象，原始值会被包装。</li><li><code>arg1, arg2, ...</code>指定的参数列表。</li><li>返回值：使用调用者提供的 <code>this</code> 值和参数调用该函数的返回值。若该方法没有返回值，则返回 <code>undefined</code>。</li></ul><p><strong><code>apply()</code></strong> 方法调用一个具有给定<code>this</code>值的函数，以及以一个数组（或类数组对象）的形式提供的参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func.<span class="title function_">apply</span>(thisArg, [argsArray])</span><br></pre></td></tr></table></figure><ul><li><code>thisArg</code>必选的。在 <em><code>func</code></em> 函数运行时使用的 <code>this</code> 值。请注意，<code>this</code>可能不是该方法看到的实际值：如果这个函数处于非严格模式下，则指定为 <code>null</code> 或 <code>undefined</code> 时会自动替换为指向全局对象，原始值会被包装。</li><li><code>argsArray</code>可选的。一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 <code>func</code> 函数。如果该参数的值为 <code>null</code>或 <code>undefined</code>，则表示不需要传入任何参数。从ECMAScript 5 开始可以使用类数组对象。</li><li>返回值：调用有指定<code>this</code>值和参数的函数的结果。</li></ul><p>**<code>bind()</code> **方法创建一个新的函数，在 <code>bind()</code> 被调用时，这个新函数的 <code>this</code> 被指定为 <code>bind()</code> 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>.<span class="title function_">bind</span>(thisArg[, arg1[, arg2[, ...]]])</span><br></pre></td></tr></table></figure><ul><li><code>thisArg</code>调用绑定函数时作为 <code>this</code> 参数传递给目标函数的值。 如果使用<code>new</code>运算符构造绑定函数，则忽略该值。当使用 <code>bind</code> 在 <code>setTimeout</code> 中创建一个函数（作为回调提供）时，作为 <code>thisArg</code> 传递的任何原始值都将转换为 <code>object</code>。如果 <code>bind</code> 函数的参数列表为空，或者<code>thisArg</code>是<code>null</code>或<code>undefined</code>，执行作用域的 <code>this</code> 将被视为新函数的 <code>thisArg</code>。</li><li><code>arg1, arg2, ...</code>当目标函数被调用时，被预置入绑定函数的参数列表中的参数。</li><li>返回值：返回一个原函数的拷贝，并拥有指定的 <code>this</code> 值和初始参数。</li></ul><h5 id="4、forEach"><a href="#4、forEach" class="headerlink" title="4、forEach"></a>4、forEach</h5><p>按升序为数组中含有效值的每一项执行一次 <code>callback</code> 函数，那些已删除或者未初始化的项将被跳过（例如在稀疏数组上）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">forEach</span>(<span class="title function_">callback</span>(currentValue [, index [, array]])[, thisArg])</span><br></pre></td></tr></table></figure><p><code>callback</code>为数组中每个元素执行的函数，该函数接收一至三个参数：</p><ul><li><p><code>currentValue</code></p><p>数组中正在处理的当前元素。</p></li><li><p><code>index</code> 可选</p><p>数组中正在处理的当前元素的索引。</p></li><li><p><code>array</code> 可选</p><p><code>forEach()</code> 方法正在操作的数组。</p></li></ul><p><code>thisArg</code> 可选参数。当执行回调函数 <code>callback</code> 时，用作 <code>this</code> 的值。</p><h5 id="5、原型链"><a href="#5、原型链" class="headerlink" title="5、原型链"></a>5、原型链</h5><p>![image-20220509120245254](&#x2F;Users&#x2F;zhaoshuchen&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220509120245254.png)</p><p>首先，要明确几个点：</p><p>1.在JS里，万物皆对象。方法（Function）是对象，方法的原型(Function.prototype)是对象。因此，它们都会具有对象共有的特点。</p><p>即：对象具有属性__proto__，可称为隐式原型，一个对象的隐式原型指向构造该对象的构造函数的原型，这也保证了实例能够访问在构造函数原型中定义的属性和方法。</p><p>2.方法(Function)</p><p>方法这个特殊的对象，除了和其他对象一样有上述_proto_属性之外，还有自己特有的属性——原型属性（prototype），这个属性是一个指针，指向一个对象，这个对象的用途就是包含所有实例共享的属性和方法（我们把这个对象叫做原型对象）。原型对象也有一个属性，叫做constructor，这个属性包含了一个指针，指回原构造函数。</p><p>知道了这两个基本点，我们来看看上面这副图。</p><p>1.构造函数Foo()</p><p>构造函数的原型属性Foo.prototype指向了原型对象，在原型对象里有共有的方法，所有构造函数声明的实例（这里是f1，f2）都可以共享这个方法。</p><p>2.原型对象Foo.prototype</p><p>Foo.prototype保存着实例共享的方法，有一个指针constructor指回构造函数。</p><p>3.实例</p><p>f1和f2是Foo这个对象的两个实例，这两个对象也有属性__proto__，指向构造函数的原型对象，这样子就可以像上面1所说的访问原型对象的所有方法啦。</p><p>另外：</p><p>构造函数Foo()除了是方法，也是对象啊，它也有__proto__属性，指向谁呢？</p><p>指向它的构造函数的原型对象呗。函数的构造函数不就是Function嘛，因此这里的__proto__指向了Function.prototype。</p><p>其实除了Foo()，Function(), Object()也是一样的道理。</p><p>原型对象也是对象啊，它的__proto__属性，又指向谁呢？</p><p>同理，指向它的构造函数的原型对象呗。这里是Object.prototype.</p><p>最后，Object.prototype的__proto__属性指向null。</p><p>总结：</p><p>1.对象有属性__proto__,指向该对象的构造函数的原型对象。</p><p>2.方法除了有属性__proto__,还有属性prototype，prototype指向该方法的原型对象。</p><p>![C1234A73-195E-4140-BFCC-E34AFB9DA235_1_201_a](&#x2F;Users&#x2F;zhaoshuchen&#x2F;Pictures&#x2F;Photos Library.photoslibrary&#x2F;resources&#x2F;renders&#x2F;C&#x2F;C1234A73-195E-4140-BFCC-E34AFB9DA235_1_201_a.jpeg)</p><p>![E893F9B6-5570-4A52-97E4-7C51D18012F8_1_201_a](&#x2F;Users&#x2F;zhaoshuchen&#x2F;Pictures&#x2F;Photos Library.photoslibrary&#x2F;resources&#x2F;renders&#x2F;E&#x2F;E893F9B6-5570-4A52-97E4-7C51D18012F8_1_201_a.jpeg)</p><h5 id="6、箭头函数"><a href="#6、箭头函数" class="headerlink" title="6、箭头函数"></a>6、箭头函数</h5><p>箭头函数表达式的语法比函数表达式更简洁，并且没有自己的<code>this</code>，<code>arguments</code>，<code>super</code>或<code>new.target</code>。箭头函数表达式更适用于那些本来需要匿名函数的地方，并且它不能用作构造函数。</p><ul><li>函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象</li><li>不可以当作构造函数，也就是说，不可以使用<code>new</code>命令，否则会抛出一个错误</li><li>不可以使用<code>arguments</code>对象，该对象在函数体内不存在。如果要用，可以用<code>Rest</code>参数代替</li><li>不可以使用<code>yield</code>命令，因此箭头函数不能用作<code>Generator</code>函数</li></ul><hr><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>this的四种绑定规则：默认绑定、隐式绑定、显式绑定和new绑定，分别对应函数的四种调用方式：独立调用、方法调用、间接调用和构造函数调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一、默认绑定</span></span><br><span class="line"><span class="comment">// 1、全局环境下，this默认绑定到window</span></span><br><span class="line"><span class="comment">// 2、函数独立调用时，this默认绑定到window</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//window</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();<span class="comment">//window</span></span><br><span class="line"><span class="comment">// 3、被嵌套的函数独立调用时，this默认绑定到window</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;<span class="comment">//var在全局作用域中声明的属性成为window对象的属性</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">foo</span>:<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">test</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">foo</span>();<span class="comment">//0(window)</span></span><br><span class="line"><span class="comment">// 4、IIFE立即执行函数实际上是函数声明后直接调用执行</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    (<span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">    &#125;)()</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    a : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">foo</span>:foo</span><br><span class="line">&#125;</span><br><span class="line">obj2.<span class="title function_">foo</span>();<span class="comment">//0，等价于上例</span></span><br><span class="line"><span class="comment">// 5、闭包：类似地，test()函数是独立调用，而不是方法调用，所以this默认绑定到window</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> test;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">foo</span>:foo</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">foo</span>()();<span class="comment">//0(window)</span></span><br><span class="line"><span class="comment">// 5、闭包里面this重定向：由于闭包的this默认绑定到window对象，</span></span><br><span class="line"><span class="comment">// 但又常常需要访问嵌套函数的this，所以常常在嵌套函数中使用var that = this，</span></span><br><span class="line"><span class="comment">// 然后在闭包中使用that替代this，使用作用域查找的方法来找到嵌套函数的this值 </span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span>;<span class="comment">//调用该方法的对象</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(that.<span class="property">a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> test;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">foo</span>:foo</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">foo</span>()();<span class="comment">//2</span></span><br><span class="line"><span class="comment">// obj.foo()是obj对象的foo方法的调用，所以里面的this指向obj，用that来重定向this使that指向obj，</span></span><br><span class="line"><span class="comment">// 然后obj.foo()()实际上就是test()方法独立调用，但是是that.a，此时that已经指向了obj，所以是2</span></span><br><span class="line"><span class="comment">// 二、隐式绑定</span></span><br><span class="line"><span class="comment">// 一般地，被直接对象所包含的函数调用时，也称为方法调用，this隐式绑定到该直接对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">foo</span>:foo,</span><br><span class="line">    <span class="attr">obj2</span>:&#123;</span><br><span class="line">        <span class="attr">a</span>:<span class="number">2</span>,</span><br><span class="line">        <span class="attr">foo</span>:foo</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj1.<span class="title function_">foo</span>();<span class="comment">//1，foo()函数的直接对象是obj1，this隐式绑定到obj1</span></span><br><span class="line">obj1.<span class="property">obj2</span>.<span class="title function_">foo</span>();<span class="comment">//2，foo()函数的直接对象是obj2，this隐式绑定到obj2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//隐式丢失：被隐式绑定的函数丢失绑定对象，从而默认绑定到window</span></span><br><span class="line"><span class="comment">// 1、函数别名</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">foo</span>:foo</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把obj.foo赋予别名bar，造成了隐式丢失，因为只是把foo()函数赋给了bar，而bar与obj对象则毫无关系</span></span><br><span class="line"><span class="keyword">var</span> bar = obj.<span class="property">foo</span>;</span><br><span class="line"><span class="title function_">bar</span>();<span class="comment">//0</span></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bar</span>();<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、参数传递</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    <span class="title function_">fn</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">foo</span>:foo</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把obj.foo当作参数传递给bar函数时，有隐式的函数赋值fn=obj.foo。与上例类似，只是把foo函数赋给了fn，而fn与obj对象则毫无关系</span></span><br><span class="line"><span class="title function_">bar</span>(obj.<span class="property">foo</span>);<span class="comment">//0</span></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    <span class="title function_">fn</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bar</span>(<span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、内置函数：与上例类似，常需要this重定向</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">foo</span>:foo</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(obj.<span class="property">foo</span>,<span class="number">100</span>);<span class="comment">//0</span></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;,<span class="number">100</span>);<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、间接引用：函数的&quot;间接引用&quot;一般都在无意间创建，最容易在赋值时发生，会造成隐式丢失</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="variable language_">this</span>.<span class="property">a</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">foo</span>: foo &#125;;</span><br><span class="line"><span class="keyword">var</span> p = &#123; <span class="attr">a</span>: <span class="number">4</span> &#125;;</span><br><span class="line">o.<span class="title function_">foo</span>(); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">//将o.foo函数赋值给p.foo函数，然后立即执行。相当于仅仅是foo()函数的立即执行</span></span><br><span class="line">(p.<span class="property">foo</span> = o.<span class="property">foo</span>)(); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 要与下面这种情况进行区分：</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="variable language_">this</span>.<span class="property">a</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">foo</span>: foo &#125;;</span><br><span class="line"><span class="keyword">var</span> p = &#123; <span class="attr">a</span>: <span class="number">4</span> &#125;;</span><br><span class="line">o.<span class="title function_">foo</span>(); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">//将o.foo函数赋值给p.foo函数，之后p.foo函数再执行，是属于p对象的foo函数的执行</span></span><br><span class="line">p.<span class="property">foo</span> = o.<span class="property">foo</span>;</span><br><span class="line">p.<span class="title function_">foo</span>();<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、其他情况</span></span><br><span class="line"><span class="comment">// 在javascript引擎内部，obj和obj.foo储存在两个内存地址，简称为M1和M2。</span></span><br><span class="line"><span class="comment">// 只有obj.foo()这样调用时，是从M1调用M2，因此this指向obj。</span></span><br><span class="line"><span class="comment">// 但是，下面三种情况，都是直接取出M2进行运算，然后就在全局环境执行运算结果（还是M2），因此this指向全局环境</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">foo</span>:foo</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="variable language_">this</span>.<span class="property">a</span> );</span><br><span class="line">&#125;;</span><br><span class="line">(obj.<span class="property">foo</span> = obj.<span class="property">foo</span>)();<span class="comment">//0</span></span><br><span class="line">(<span class="literal">false</span> || obj.<span class="property">foo</span>)();<span class="comment">//0</span></span><br><span class="line">(<span class="number">1</span>, obj.<span class="property">foo</span>)();<span class="comment">//0</span></span><br><span class="line"><span class="comment">// 三、显式绑定：通过call()、apply()、bind()方法把对象绑定到this上。对于被调用的函数来说，叫做间接调用</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">foo</span>();<span class="comment">//0</span></span><br><span class="line">foo.<span class="title function_">call</span>(obj);<span class="comment">//2</span></span><br><span class="line"><span class="comment">// 普通的显式绑定无法解决隐式丢失问题</span></span><br><span class="line"><span class="comment">// 1、硬绑定：是显式绑定的一个变种，使this不能再被修改</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> bar= <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    foo.<span class="title function_">call</span>(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在bar函数内部手动调用foo.call(obj)。因此，无论之后如何调用函数bar，它总会手动在obj上调用foo</span></span><br><span class="line"><span class="title function_">bar</span>();<span class="comment">//2</span></span><br><span class="line"><span class="built_in">setTimeout</span>(bar,<span class="number">100</span>);<span class="comment">//2</span></span><br><span class="line">bar.<span class="title function_">call</span>(<span class="variable language_">window</span>);<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、API：新增了许多内置函数，具有显式绑定的功能，如数组的：map()、forEach()、filter()、some()、every()</span></span><br><span class="line"><span class="keyword">var</span> id = <span class="string">&#x27;window&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">el</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(el,<span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;fn&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="title function_">forEach</span>(foo);<span class="comment">//1 &quot;window&quot; 2 &quot;window&quot; 3 &quot;window&quot;</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="title function_">forEach</span>(foo, obj);<span class="comment">//1 &quot;fn&quot; 2 &quot;fn&quot; 3 &quot;fn&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 四、new绑定：如果函数或者方法调用之前带有关键字new，它就构成构造函数调用。对于this绑定来说，称为new绑定</span></span><br><span class="line"><span class="comment">// 1、构造函数通常不使用return关键字，它们通常初始化新对象，当构造函数的函数体执行完毕时，它会显式返回。</span></span><br><span class="line"><span class="comment">// 在这种情况下，构造函数调用表达式的计算结果就是这个新对象的值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> <span class="title class_">Fn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test);<span class="comment">//&#123;a:2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、如果构造函数使用return语句但没有指定返回值，或者返回一个原始值，那么这时将忽略返回值，同时使用这个新对象作为调用结果</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> <span class="title class_">Fn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test);<span class="comment">//&#123;a:2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、如果构造函数显式地使用return语句返回一个对象，那么调用表达式的值就是这个对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> <span class="title class_">Fn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test);<span class="comment">//&#123;a:1&#125;</span></span><br><span class="line"><span class="comment">// 注意：尽管有时候构造函数看起来像一个方法调用，它依然会使用这个新对象作为this。</span></span><br><span class="line"><span class="comment">// 也就是说，在表达式new o.m()中，this并不是o，而是新对象</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">m</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o);<span class="comment">//&#123;m:f&#125;</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> o.<span class="title function_">m</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj,obj === o);<span class="comment">//m&#123;&#125; false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">constructor</span> === o.<span class="property">m</span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">m</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> o.<span class="title function_">m</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj,obj === o);<span class="comment">//m &#123;a: 2&#125; false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">constructor</span> === o.<span class="property">m</span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 五、严格模式：独立调用的函数的this指向undefined</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="comment">// 在非严格模式下，使用函数的call()或apply()方法时，null或undefined值会被转换为全局对象。</span></span><br><span class="line"><span class="comment">// 而在严格模式下，函数的this值始终是指定的值</span></span><br><span class="line"><span class="keyword">var</span> color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">displayColor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">color</span>);</span><br><span class="line">&#125;</span><br><span class="line">displayColor.<span class="title function_">call</span>(<span class="literal">null</span>);<span class="comment">//red</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">displayColor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">color</span>);</span><br><span class="line">&#125;</span><br><span class="line">displayColor.<span class="title function_">call</span>(<span class="literal">null</span>);<span class="comment">//TypeError: Cannot read property &#x27;color&#x27; of null</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>说到底，javascript如此复杂的原因是因为函数过于强大。因为，函数是对象，所以原型链比较复杂；因为函数可以作为值被传递，所以执行环境栈比较复杂；同样地，因为函数具有多种调用方式，所以this的绑定规则也比较复杂。只有理解了函数，才算理解了javascript。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近在学Vue，其中Vue2的组件间数据传输用到大量的this，一会指向vm(Vue实例对象)，一会指向vc(组件实例对象)，令人非常头疼。</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://shuchenzhao.github.io/2022/04/13/hello-world/"/>
    <id>https://shuchenzhao.github.io/2022/04/13/hello-world/</id>
    <published>2022-04-13T15:51:54.000Z</published>
    <updated>2022-03-23T03:35:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hi"><a href="#Hi" class="headerlink" title="Hi!"></a>Hi!</h3><h4 id="It’s-great-to-be-here-in-Hexo-This-is-my-very-first-post"><a href="#It’s-great-to-be-here-in-Hexo-This-is-my-very-first-post" class="headerlink" title="It’s great to be here in Hexo. This is my very first post."></a>It’s great to be here in Hexo. This is my very first post.</h4><p>For now, however, I don’t know exactly what I want to post in this blog. Maybe I will sharing what I am learning right now and record some daily life. As long as I come up with a inspiringly idea, I’ll write it down in time and release it so that more people can see it.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Hi&quot;&gt;&lt;a href=&quot;#Hi&quot; class=&quot;headerlink&quot; title=&quot;Hi!&quot;&gt;&lt;/a&gt;Hi!&lt;/h3&gt;&lt;h4 id=&quot;It’s-great-to-be-here-in-Hexo-This-is-my-very-first-post&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
  </entry>
  
</feed>
